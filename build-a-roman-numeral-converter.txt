** start of undefined **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"></meta>
  <meta http-equiv="X-UA-Compatible" content="IE=edge"></meta>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
  <title>Build a Roman Numeral Converter</title>
  <!-- Link your CSS file -->
  <link rel="stylesheet" href="styles.css"></link>
</head> 
<body>
  <!-- Your HTML content goes here -->
  <h1>Roman Numeral Converter</h1>
  <div class="input-container">
    <label for="number">Enter a Number:</label>
    <input
      value=""
      type="number"
      name="decimal number input"
      id="number"
      class="number">
    </input> 
    <button class="convert-btn" id="convert-btn">Convert</button> 
  </div>
  <div id="output">
    <output id="output" for="number"></output>
  </div> 
  <!-- Your JS content goes here --> 
  <script src="script.js"></script>
</body>   
</html>

** end of undefined **

** start of undefined **

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

:root {
  --light-grey: #f5f6f7;
  --dark-blue: #1b1b32;
  --orange: #f1be32;
}

body {
  background-color: var(--dark-blue);
  font-family: "Times New Roman", Times, serif;
  font-size: 18px;
  color: var(--light-grey);
  padding: 0 15px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

h1 {
  text-align: center;
  font-size: 2.3rem;
  margin: 20px 0;
}

.input-container {
  margin: 10px 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
  justify-content: center;
  align-items: center;
}

.convert-btn {
  background-color: var(--orange);
  cursor: pointer;
  border: none;
  padding: 4px;
}

.number-input {
  height: 25px;
}

#result {
  margin: 10px 0;
  min-width: 200px;
  width: fit-content;
  min-height: 80px;
  word-break: break-word;
  padding: 15px;
  border: 5px solid var(--orange);
  font-size: 2rem;
  text-align: center;
}

#animation-container {
  margin: auto;
  max-width: 300px;
}

.animation-frame {
  margin: 250px auto 0;
  padding: 15px 10px;
  border: 5px solid var(--orange);
  font-size: 1.2rem;
  text-align: center;
}

@media screen and (min-width: 500px) {
  .input-container {
    flex-direction: row;
  }

  #result {
    max-width: 460px;
  }
}

** end of undefined **

** start of undefined **

const numberInput = document.getElementById("number");
const convertBtn = document.getElementById("convert-btn");
const numberOutput = document.getElementById("output");

//the new conversion process
const decimalToRoman = (input) => {
  let result = ""; //initialize empty string to store it

  //mapping decimals to roman
const romanNumerals = {
  1000: "M",
  900: "CM",
  500: "D",
  400: "CD",
  100: "C",
  90: "XC",
  40: "XL",
  10: "X",
  9: "IX",
  5: "V",
  4: "IV",
  1: "I",
};

//iterare over decimal values in descending order?
for (let value of Object.keys(romanNumerals).sort((a,b) => b-a)) {
  //repeat roman AMTAP
  while (input >= value) {
    result += romanNumerals[value];
    input -= value;
  }
}
return result; //return roman 
};

//checks if blank or NaN, is return correct?------
const checkUserInput = () => {
  const inputInt = parseInt(numberInput.value);

  if (!numberInput.value || isNaN(inputInt)) {
    numberOutput.textContent = "Please enter a valid number";
    return;
  } 
  
  else if (numberInput.value <= -1) {
    numberOutput.textContent = "Please enter a number greater than or equal to 1";
    return;
  }

  else if (numberInput.value >= 4000) {
    numberOutput.textContent = "Please enter a number less than or equal to 3999";
    return;
  }

  numberOutput.textContent = decimalToRoman(inputInt);
  
  numberInput.value = "";
};

convertBtn.addEventListener("click", checkUserInput);

numberInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    checkUserInput();
  }
});

//how to attach to the end like a string?

//OG conversion process
//const decimalToRoman = (input) => {
  //let input = numberInput;
  //if (input >= 1000) {
    //input -= 1000;
   //numberOutput.shift("M");   
  //} 
  //else if (input <= 999 && input >= 900) {
    //input -= 900;
    //numberOutput.shift("CM");
  //}
  //return numberOutput;
//};

////iterare over decimal values in descending order?
//  if (input >= 1000) {
  //  input -= 1000;
 //  numberOutput.shift("M");   
 // } 
 // else if (input <= 999 && input >= 900) {
  //  input -= 900;
  //  numberOutput.shift("CM");
  //}
  //return numberOutput;
//};

** end of undefined **

